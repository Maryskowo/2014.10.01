import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import repositories.ICatalogRepository;
import repositories.impl.RepositoryCatalog;
import unitofwork.IUnitOfWork;
import unitofwork.UnitOfWork;
import domain.User;
import domain.Watcher;


public class Main {

	public static void main(String[] args) {
		
		String url="jdbc:hsqldb:hsql://localhost/";
		User testerino = new User();
		testerino.setLogin("Maryskowo");
		testerino.setPassword("random");
		
	/*
		Watcher test2 = new Watcher();
		test2.setTitle("LOTR");
		test2.setType("Film");
		test2.setCategory("epic,mordor,noshoes");
		test2.setScore(9);
		test2.setEpisodes(3);
		test2.setTimeInMinutes(240);
	*/	
try {
			
			Connection connection = DriverManager.getConnection(url);
			IUnitOfWork uow = new UnitOfWork(connection);
			
			String createTableSql = 
					"CREATE TABLE users("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "login VARCHAR(20),"
					+ "password VARCHAR(20)"
					+ ")";
			Statement createTable = connection.createStatement();
			createTable.executeUpdate(createTableSql);
			
			/*
			String createTableSql2 =
					"CREATE TABLE watchers("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "title VARCHAR(40),"
					+ "type VARCHAR(10),"
					+ "category VARCHAR(60),"
					+ "score INT(2),"
					+ "episodes INT(3),"
					+ "timeinminutes INT(5)"
					+ ")";
			Statement createTable2 = connection.createStatement();
			createTable2.executeUpdate(createTableSql2);
			*/
			
			ICatalogRepository catalog = new RepositoryCatalog(connection, uow);
			
			
			catalog.getUsers().add(testerino);
			
			List<User> usersFromDb= catalog.getUsers().getAll();
			
			for(User userFromDb: usersFromDb)
				System.out.println(userFromDb.getId()+" "+userFromDb.getLogin()+" "+userFromDb.getPassword());
			
			/*
			User u = catalog.getUsers().get(2);
			u.setPassword("heheszki");
			catalog.getUsers().update(u);
			catalog.getUsers().delete(usersFromDb.get(0));
		
			for(User userFromDb: catalog.getUsers().getAll())
				System.out.println(userFromDb.getId()+" "+userFromDb.getLogin()+" "+userFromDb.getPassword());
			*/
			
			/* 
			catalog.getWatcher().add(test2);
			
			List<Watcher> watchersFromDb= catalog.getWatcher().getAll();
			
			for(Watcher watcherFromDb: watchersFromDb)
				System.out.println(watcherFromDb.getId()+" "+watcherFromDb.getTitle()+" "+watcherFromDb.getType()+" "+watcherFromDb.getCategory()+" "+watcherFromDb.getScore()+" "+watcherFromDb.getEpisodes()+" "+watcherFromDb.getTimeInMinutes());
			*/
			
			/*
			Watcher w = catalog.getWatcher().get(2);
			w.setScore(6);
			catalog.getWatcher().update(w);
			catalog.getWatcher().delete(watchersFromDb.get(0));
			
			for(Watcher watcherFromDb: watchersFromDb)
				System.out.println(watcherFromDb.getId()+" "+watcherFromDb.getTitle()+" "+watcherFromDb.getType()+" "+watcherFromDb.getCategory()+" "+watcherFromDb.getScore()+" "+watcherFromDb.getEpisodes()+" "+watcherFromDb.getTimeInMinutes());
			*/
		} catch (SQLException e) {
			e.printStackTrace();
		}
		System.out.println("koniec");

		}
}

/* Quick first ideas
 * 
 * Person - done
 * User - done
 * Watcher - done
 * Reader - done
 * Lists - done
 * Ranks - 
 * Scores - done
 * Achievements
 * Badges
 * Levels
 * Secret ranks
 * User ranks
 * Leader board
 * Plans
 * Reviews (?)
 * Cards (?)
 * Value (?)
 * Characters (?)
 * Voice Actors (?)
 * Shop (?)
 * 
 * Roles & Privileges (?)
 * Reader and watcher List instead of variable type
 */